Install NodeJS
===============
:Author:  Gabriel Rodrigues
:email:   gabrielsr@gmail.com


[source,perl]
----
#Windows with chocolately, [https://chocolatey.org]
>cinst nodejs
----
[source,perl]
----
#OS X With Brew
$brew isntall node 
----
[source,perl]
----
#Ubuntu with apt
$sudo apt-get install python-software-properties python g++ make
$sudo add-apt-repository ppa:chris-lea/node.js
$sudo apt-get update
$sudo apt-get install nodejs
----

OR
Using the instalantion bundle http://nodejs.org/[download]


Modular System
---------------
Though JavaScrit don't with a buit in, Node integrate one a modular system, CommonJS

CommonJS: Module Context
~~~~~~~~~~~~~~~~~~~~~~~~

Declaring
~~~~~~~~~~
Just set exports with any function.

auth.js
[source, js]
----

/**
* Authentication module
*/
exports.createSalt = function(depth, callback) {
  //do salty things
  if (err) {
    return callback(err);
  }
  callback();
}

exports.createHash = function(password, salt, callback) {
  //hashification
  if (err) {
    return callback(err);
  }
  callback();
}
----

Using
~~~~~~

Now in another module, require and use it.

Client.js
[source, js]
----
/**
* User module
*/
var db = require('./db.js');
var auth = require('./auth.js'); //file extension is optional.

exports.create = function(req, res, callback) {
  var user = req.username,
  pwd = req.password,
  email = req.email;
  db.findOrCreate('user', {username: user});
  db.lookup('user', {username: user }, function(err, data) {
    if (err) {
    return callback(err);
    }
    // Didn't find a user by that name
    if (data.userid === null) {

      auth.createSalt(depth, function(err, salt) {

      if (err) {
      return callback(err);
      }
      ...

----

Only exporteded function is accessible, the other are private.

It`s highly recommended to write a Node application in a modular way. 


CommonJS: modules load
-----------------------
The very first place that is checked when loading a module is the module cache, 
so if you have previously loaded a module, you will have access to it already.
If Node.js cannot find a cached module, precedence is then given to the Node.js
native modules, such as crypto, http, fs, etc. If a native module is not found
by the identifier passed to require(), then Node.js will perform a file-system
search for the identifier that was passed to it.


Not in cache, not native:

require('aModule.js');. Node.js will try to load only that file,
in the base path that you are requiring from,

require('./modules/aModule.js');. In that case, your Node.js will attempt to load 
your module from within the path you designate.

require('./modules/aModule'); Without extension, the first thing Node.js will do 
is try to load the file with each of the extensions: .js, .json,.node
next thing that Node.js assumes is that there must be an “index” file in the path


NPM: node package management
------------------------------
Together with node >0.6.3 come npm, node package manager. Think it like maven, gradle, gem...


Using npm modules
~~~~~~~~~~~~~~~~~~~
Search and Install: To find a package, use the search functionality, in your browser https://npmjs.org/
or in your terminal

[source, shell]
----
$npm search <term(s) or package name>

#than intall it

npm install <package name>
----

download the package and place it in a directory in your application. This directory 
is named “node_modules” and will usually reside in the same directory as your package 
definition file named package.json

To install a package in a global folder (accessible by any project in your machine) use '-g'.


[source, shell]
----
npm install –g <package name>
----

Declarando o Pacote
~~~~~~~~~~~~~~~~~~~~
Did you got your package, tested and finished your feature. Now it's a good idea declare that your 
project depends on this public package. Time to incluse in package.json


A simple package.json
[source, shell]
----
{
  "name": "squirrel",
  "version": "0.0.1",
  },
  "dependencies": {
    "express": "3.0.0rc4"
  }
}

----
not so simple package.json
[source, shell]
----
{
  "name": "squirrel",
  "version": "0.0.1",
  "private": true,
  "scripts": {
  "start": "node app"
  },
  "dependencies": {
    "express": "3.0.0rc4",
    "ejs": "*",
    "feedparser": ""
  },
  "gitHead": "e122...",
  "description": "A sample app to parse through your RSS feeds",
  "main": "app.js",
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "ssh://git@bitbucket.org/username/squirrel.git"
    },
    "keywords": [
    "rss"
  ],
  "author": "cory gackenheimer",
  "license": "MIT"
}
----
when you 'npm install' from the root of your application, npm will install the prescribed version of 
express, ejs, and feedparser, in order to resolve the dependencies listed in package.json.


Reference: Node.js Recipes, ch 1
